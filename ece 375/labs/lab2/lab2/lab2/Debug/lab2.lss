
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093b  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <stdio.h>

int main(void)
{

	DDRB = 0b11110000;      
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000000; 
  a2:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b00000011;
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	82 bb       	out	0x12, r24	; 18
	PORTB = 0b01100000;
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	88 bb       	out	0x18, r24	; 24
		
		if(~PIND & 0b00000010)//if left whisker is tripped
		{	//_delay_ms(500); this is for challenge
			PORTB=0b00000000;
			_delay_ms(500);
			PORTB=0b01000000;	//Turn Right
  ac:	90 e4       	ldi	r25, 0x40	; 64
			_delay_ms(1000);
			PORTB = 0b01100000;
  ae:	38 2f       	mov	r19, r24
		if(~PIND & 0b00000001)//if right whisker is tripped
		{
			//_delay_ms(500); this is for challenge
			PORTB=0b00000000;
			_delay_ms(500);
			PORTB=0b00100000; 	//Turn Left
  b0:	20 e2       	ldi	r18, 0x20	; 32
	PORTD = 0b00000011;
	PORTB = 0b01100000;
	while (1)	       					// Loop Forever
	{
		
		if(~PIND & 0b00000010)//if left whisker is tripped
  b2:	81 99       	sbic	0x10, 1	; 16
  b4:	15 c0       	rjmp	.+42     	; 0xe0 <main+0x42>
		{	//_delay_ms(500); this is for challenge
			PORTB=0b00000000;
  b6:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	59 e6       	ldi	r21, 0x69	; 105
  bc:	68 e1       	ldi	r22, 0x18	; 24
  be:	41 50       	subi	r20, 0x01	; 1
  c0:	50 40       	sbci	r21, 0x00	; 0
  c2:	60 40       	sbci	r22, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x20>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x2a>
  c8:	00 00       	nop
			_delay_ms(500);
			PORTB=0b01000000;	//Turn Right
  ca:	98 bb       	out	0x18, r25	; 24
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	53 ed       	ldi	r21, 0xD3	; 211
  d0:	60 e3       	ldi	r22, 0x30	; 48
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	60 40       	sbci	r22, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x34>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
  dc:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0b01100000;
  de:	88 bb       	out	0x18, r24	; 24
	
		}
		if(~PIND & 0b00000001)//if right whisker is tripped
  e0:	80 99       	sbic	0x10, 0	; 16
  e2:	e7 cf       	rjmp	.-50     	; 0xb2 <main+0x14>
		{
			//_delay_ms(500); this is for challenge
			PORTB=0b00000000;
  e4:	18 ba       	out	0x18, r1	; 24
  e6:	4f ef       	ldi	r20, 0xFF	; 255
  e8:	59 e6       	ldi	r21, 0x69	; 105
  ea:	68 e1       	ldi	r22, 0x18	; 24
  ec:	41 50       	subi	r20, 0x01	; 1
  ee:	50 40       	sbci	r21, 0x00	; 0
  f0:	60 40       	sbci	r22, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x4e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x58>
  f6:	00 00       	nop
			_delay_ms(500);
			PORTB=0b00100000; 	//Turn Left
  f8:	28 bb       	out	0x18, r18	; 24
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	53 ed       	ldi	r21, 0xD3	; 211
  fe:	60 e3       	ldi	r22, 0x30	; 48
 100:	41 50       	subi	r20, 0x01	; 1
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	60 40       	sbci	r22, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x62>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x6c>
 10a:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0b01100000;
 10c:	38 bb       	out	0x18, r19	; 24
 10e:	d1 cf       	rjmp	.-94     	; 0xb2 <main+0x14>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
